// нужен шаблон во всем ООП, а не только JS, в качестве шаблонов выступают классы.
// класс - это шаблон, заготовка, в котором программист пытается предусмотреть все, что необходимо для дальнейшей работы и на основании класса / классов строить свое приложение.

class Header {
  // Внутри класса должен быть коструктор, если его не укажем мы, это сделает JS
  // Что такое конструктор? Конструктор - это специальная функция, которая запуститься, когда из класса создадим объект
  // Внутри конструктора указываем, что хотим видеть в этом классе. Тоесть необходимо ключам будущего объекта присвоить нужные нам значения. 
  constructor(img, h1, h2) {
    this.src = img; // this - это ссылка на будущей объект
    this.h1 = h1;
    this.h2 = h2;
  }

  // Добавляем внутрь класса методы, надо дать имя методу и указать, что от него хотим
  render(x) {
    // x - указывает на то, куда мы будем отрисовывать наш заголовок.
    // console.log(this.h1);
    let out = '';
    out += `<img src="${this.src}" alt="" class="logo">`;
    out += `<h1>${this.h1}</h1>`;
    out += `<h2>${this.h2}</h2>`;
    document.getElementById(x).innerHTML = out;
  }
}

const img = 'https://cdn0.iconfinder.com/data/icons/flat-round-system/512/reactos-512.png'

// Создаем новый объект через синтаксис new и передаем параметры, иначе данный объект будет undefined
let header = new Header(img, 'Hello', 'world');
console.log(header);
// Вызваем метод! Как вызвать метод? пишим имя объекта. имя метода + ()
header.render('header');

// из класса -> объект и...
// запускать какой-то метод, который выводит этот класс, рисует html страницу
// Стоп, у нас ведь был render (что рисовать, куда отрисовывать)
// const a = {
//   key: value,
//   key2: value,
//   key3: function() {}
// }